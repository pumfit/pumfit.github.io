I"<h1 id="가장-긴-증가하는-부분-수열-2">가장 긴 증가하는 부분 수열 2</h1>

<p>🔗 https://www.acmicpc.net/problem/12015</p>

<p>수열 A가 주어졌을 때, 가장 긴 증가하는 부분 수열을 구하는 프로그램을 작성하시오.</p>

<p>예를 들어, 수열 A = {10, 20, 10, 30, 20, 50} 인 경우에 가장 긴 증가하는 부분 수열은 A = {<strong>10, 20</strong> , 10, <strong>30</strong>, 20, <strong>50</strong>} 이고, 길이는 4이다.</p>

<p>첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000,000)이 주어진다.</p>

<h2 id="-풀이-진행-과정">🦕 풀이 진행 과정</h2>

<p>N 값이  1,000,000 이므로 이중for문을 통한 계산은 어렵다는 것은 알 수 있지만 어떻게 이분탐색으로 풀이를 해야할지 감이 오지 않았다.</p>

<p>순차적으로 이전 값보다 크면 넣어가다가 아닌 수 가 나오면 lower_bound를 사용해 교체하는 식으로 진행하면된다.</p>

<h2 id="️-lower_bound">⬇️ lower_bound</h2>

<p><code class="language-plaintext highlighter-rouge">#include &lt;algorithm&gt;</code> 를 포함해야한다.</p>

<blockquote>
  <p>ForwardIt는 한방향으로 진행하는 Iterator를 의미한다.</p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">ForwardIt lower_bound( ForwardIt first, ForwardIt last, const T&amp; value );</code></p>

<p>lower_bound는 하한선을 의미하며 first - last 범위 내에서 value 보다 같거나 큰 값을 가진 원소의 반복자를 반환한다.</p>

<h2 id="풀이">👩‍💻풀이</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td> --><td class="rouge-code"><pre><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">n</span><span class="p">;</span>
	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
	<span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;</span><span class="n">n</span><span class="p">)</span> <span class="c1">//step1. 입력값이 배열의 마지막값보다 큰 경우에는 배열에 추가한다.</span>
			<span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
		<span class="k">else</span> <span class="c1">//step2. 입력값이 배열의 마지막값보다 작은 경우는 배열내의 같거나 큰 값을 입력값으로 바꾼다.</span>
		<span class="p">{</span>
			<span class="n">v</span><span class="p">[</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">n</span><span class="p">)</span> <span class="o">-</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">()]</span><span class="o">=</span><span class="n">n</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="-reference">🔗 Reference</h2>

<p>[lower_bound] https://en.cppreference.com/w/cpp/algorithm/lower_bound</p>
:ET